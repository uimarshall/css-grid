.item1 {
	background-color: blue;
}
.item2 {
	background-color: rgb(0, 255, 106);
}
.item3 {
	background-color: rgb(255, 0, 13);
}
.item4 {
	background-color: rgb(0, 204, 255);
}
.item5 {
	background-color: rgb(255, 136, 0);
}
.item6 {
	background-color: rgb(155, 153, 161);
}
.item7 {
	background-color: rgb(32, 34, 34);
}
.item8 {
	background-color: rgb(111, 111, 189);
}
.item9 {
	background-color: rgb(208, 208, 236);
}
.item10 {
	background-color: rgb(52, 52, 116);
}
.container {
	display: grid;
	/* How big should the rows and cols be slized? */
	/* We will hv 3 cols of 300px wide, the browser will place each grid-item 100px wide it in the cols. */
	/* Once the number of cols specified is created, the rest of the grid-items defaults to row  */
	grid-template-columns: 100px 100px 100px; /*controls the width of grid items*/
	grid-template-rows: 100px 50px 30px; /*controls the height of grid items*/
	grid-gap: 10px;
	grid-auto-rows: 300px; /*takes care of the implicit created row in this case item 10*/
	margin-bottom: 20px;
}

/* GRID-AUTO-FLOW  */
/* It takes care of grid-items defaulting to row, once cols are created */
/* It works like flex-flow */

.container1 {
	display: grid;
	grid-template-columns: 200px 500px 300px;
	grid-auto-flow: column;
	/* Any grid-col that has been implicitly created should be 300px wide */
	grid-auto-columns: 300px;
}

/* <!-- SIZING -GRID-TRACK */
.container2 {
	/* fr-free space takes the remaining space available after specing the grid-items width */

	display: grid;
	grid-gap: 10px;
	/* width of col1 is defined by auto */
	/* width of col2 is defined by 200px */
	/* width of col3 is defined by text content of 3rd div, which is auto */
	/* col4 takes the remaining free space*/
	grid-template-columns: auto 200px auto 1fr;
	border: 1px solid orchid;
}

.container3 {
	display: grid;
	grid-gap: 10px;
	grid-template-columns: repeat(5, 1fr);
}
.container3 .item3 {
	background-color: rgb(255, 0, 13);
	/* Instead of using content width or free space(fr), we use span to specify the width of particular item */
	/* This can be used for positioning */
	grid-column: span 2;
	grid-row: span 3;
}
/* 3015658301 */

/* PLACING GRID-ITEMS */
.container4 {
	display: grid;
	grid-gap: 10px;
	grid-template-columns: repeat(3, 1fr);
}

.container4 .item5 {
	background: peru;
	/* 3 properties are used for the positioning */
	/* 1. grid-lines or track */
	/* 2. grid-column-start */
	/* 3. grid-column-end */
	grid-column: 1/3; /*start from grid-line 1-3*/
	/* grid-column: 1/-1; start from grid-line 1-end */
	grid-row: 1 / 7;
}

/* AUTO-FIT AND AUTO-FILL */
.container5 {
	display: grid;
	grid-gap: 10px;
	grid-template-columns: repeat(auto-fill, 200px);
}
.container5 .item4 {
	background: peru;
	/* auto-fit fits the grid items into the available space */
	/* auto-fill fill the grid items into the available space calculating 
	how much space the items can take based on width specified either in px */
	grid-column: auto/-1; /*start from where you are to the end*/
}

/* MINMAX WITH AUTO-FIT AND AUTO-FILL */
.container6 {
	display: grid;
	grid-gap: 10px;
	/* start the width of the grid-item at 200px and fill all available space */
	grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
	/* grid-template-columns: fit-content(100px) 200px 200px 200px; fit 1st item to 100px width */
}
